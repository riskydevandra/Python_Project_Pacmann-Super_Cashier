# -*- coding: utf-8 -*-
"""script complete

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1afcGNxoFFxhiGzur0L-BYXzA-sx0zejO
"""

from tabulate import tabulate

class Transaction:
    def __init__(self):
        """
        Initialize a new transaction instance.
        """
        self.items = []

    def add_item(self, item):
        """
        Add a new item to the transaction.

        Parameters:
        - item (list): A list containing the item details [Nama Item, Jumlah Item, Harga/Item].
        """
        try:
            if len(item) != 3:
                raise ValueError("Item harus berupa list dengan tiga elemen.")
            self.items.append(item)
            print(f"Item '{item[0]}' ditambahkan.")
        except ValueError as e:
            print(f"Error: {e}")

    def update_item_name(self, old_name, new_name):
        """
        Update the name of an item in the transaction.

        Parameters:
        - old_name (str): The current name of the item.
        - new_name (str): The new name for the item.
        """
        try:
            for item in self.items:
                if item[0] == old_name:
                    item[0] = new_name
                    print(f"Nama item '{old_name}' diubah menjadi '{new_name}'.")
                    return
            raise ValueError(f"Item dengan nama '{old_name}' tidak ditemukan.")
        except ValueError as e:
            print(f"Error: {e}")

    def update_item_qty(self, name, new_qty):
        """
        Update the quantity of an item in the transaction.

        Parameters:
        - name (str): The name of the item.
        - new_qty (int): The new quantity for the item.
        """
        try:
            for item in self.items:
                if item[0] == name:
                    item[1] = new_qty
                    print(f"Jumlah item '{name}' diubah menjadi {new_qty}.")
                    return
            raise ValueError(f"Item dengan nama '{name}' tidak ditemukan.")
        except ValueError as e:
            print(f"Error: {e}")

    def update_item_price(self, name, new_price):
        """
        Update the price of an item in the transaction.

        Parameters:
        - name (str): The name of the item.
        - new_price (float): The new price for the item.
        """
        try:
            for item in self.items:
                if item[0] == name:
                    item[2] = new_price
                    print(f"Harga item '{name}' diubah menjadi {new_price}.")
                    return
            raise ValueError(f"Item dengan nama '{name}' tidak ditemukan.")
        except ValueError as e:
            print(f"Error: {e}")

    def delete_item(self, name):
        """
        Delete an item from the transaction.

        Parameters:
        - name (str): The name of the item to be deleted.
        """
        try:
            for item in self.items:
                if item[0] == name:
                    self.items.remove(item)
                    print(f"Item '{name}' dihapus.")
                    return
            raise ValueError(f"Item dengan nama '{name}' tidak ditemukan.")
        except ValueError as e:
            print(f"Error: {e}")

    def reset_transaction(self):
        """
        Reset the transaction by clearing all items.
        """
        try:
            if self.items:
                print("Semua transaksi di-reset.")
                self.items = []
            else:
                print("Tidak ada transaksi untuk di-reset.")
        except Exception as e:
            print(f"Error: {e}")

    def check_order(self):
        """
        Check the order for any input errors and display the transaction details.
        """
        try:
            for item in self.items:
                if any(value is None for value in item):
                    raise ValueError("Terdapat kesalahan input data")
            print("Pemesanan sudah benar")

            headers = ["No", "Nama Item", "Jumlah Item", "Harga/Item", "Total Harga"]
            table_data = [[i + 1, item[0], item[1], item[2], item[1] * item[2]] for i, item in enumerate(self.items)]
            print(tabulate(table_data, headers=headers, tablefmt="grid"))
        except ValueError as e:
            print(f"Error: {e}")

    def total_price(self):
        """
        Calculate and display the total price with discounts.
        """
        try:
            total = sum(item[1] * item[2] for item in self.items)
            discount = 0

            if total > 500000:
                discount = 0.1
            elif total > 300000:
                discount = 0.08
            elif total > 200000:
                discount = 0.05

            discounted_total = total - (total * discount)
            print(f"Total Belanja: Rp {total}")
            print(f"Diskon: {discount * 100}%")
            print(f"Total Bayar: Rp {discounted_total}")
        except Exception as e:
            print(f"Error: {e}")
